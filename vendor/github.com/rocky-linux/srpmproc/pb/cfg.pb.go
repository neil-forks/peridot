// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: cfg.proto

package srpmprocpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SpecChange_FileOperation_Type int32

const (
	SpecChange_FileOperation_Unknown SpecChange_FileOperation_Type = 0
	SpecChange_FileOperation_Source  SpecChange_FileOperation_Type = 1
	SpecChange_FileOperation_Patch   SpecChange_FileOperation_Type = 2
)

// Enum value maps for SpecChange_FileOperation_Type.
var (
	SpecChange_FileOperation_Type_name = map[int32]string{
		0: "Unknown",
		1: "Source",
		2: "Patch",
	}
	SpecChange_FileOperation_Type_value = map[string]int32{
		"Unknown": 0,
		"Source":  1,
		"Patch":   2,
	}
)

func (x SpecChange_FileOperation_Type) Enum() *SpecChange_FileOperation_Type {
	p := new(SpecChange_FileOperation_Type)
	*p = x
	return p
}

func (x SpecChange_FileOperation_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecChange_FileOperation_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_cfg_proto_enumTypes[0].Descriptor()
}

func (SpecChange_FileOperation_Type) Type() protoreflect.EnumType {
	return &file_cfg_proto_enumTypes[0]
}

func (x SpecChange_FileOperation_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecChange_FileOperation_Type.Descriptor instead.
func (SpecChange_FileOperation_Type) EnumDescriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{4, 0, 0}
}

// Replace directive replaces a file from the rpm repository
// with a file from the patch repository.
// Replacing content can either be inline or in the same patch-tree.
type Replace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required - Replaced file
	File string `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	// Types that are assignable to Replacing:
	//	*Replace_WithFile
	//	*Replace_WithInline
	//	*Replace_WithLookaside
	Replacing isReplace_Replacing `protobuf_oneof:"replacing"`
}

func (x *Replace) Reset() {
	*x = Replace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Replace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Replace) ProtoMessage() {}

func (x *Replace) ProtoReflect() protoreflect.Message {
	mi := &file_cfg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Replace.ProtoReflect.Descriptor instead.
func (*Replace) Descriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{0}
}

func (x *Replace) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (m *Replace) GetReplacing() isReplace_Replacing {
	if m != nil {
		return m.Replacing
	}
	return nil
}

func (x *Replace) GetWithFile() string {
	if x, ok := x.GetReplacing().(*Replace_WithFile); ok {
		return x.WithFile
	}
	return ""
}

func (x *Replace) GetWithInline() string {
	if x, ok := x.GetReplacing().(*Replace_WithInline); ok {
		return x.WithInline
	}
	return ""
}

func (x *Replace) GetWithLookaside() string {
	if x, ok := x.GetReplacing().(*Replace_WithLookaside); ok {
		return x.WithLookaside
	}
	return ""
}

type isReplace_Replacing interface {
	isReplace_Replacing()
}

type Replace_WithFile struct {
	// Replace with in-tree file
	WithFile string `protobuf:"bytes,2,opt,name=with_file,json=withFile,proto3,oneof"`
}

type Replace_WithInline struct {
	// Replace with inline content
	WithInline string `protobuf:"bytes,3,opt,name=with_inline,json=withInline,proto3,oneof"`
}

type Replace_WithLookaside struct {
	// Replace with lookaside cache object
	WithLookaside string `protobuf:"bytes,4,opt,name=with_lookaside,json=withLookaside,proto3,oneof"`
}

func (*Replace_WithFile) isReplace_Replacing() {}

func (*Replace_WithInline) isReplace_Replacing() {}

func (*Replace_WithLookaside) isReplace_Replacing() {}

// Delete directive deletes literal files from the rpm repository.
// Won't delete from spec automatically.
// Use the `SpecChange` directive for that
type Delete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required
	File string `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *Delete) Reset() {
	*x = Delete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Delete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Delete) ProtoMessage() {}

func (x *Delete) ProtoReflect() protoreflect.Message {
	mi := &file_cfg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Delete.ProtoReflect.Descriptor instead.
func (*Delete) Descriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{1}
}

func (x *Delete) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

// Add directive adds a file from the patch repository to the rpm repository.
// The file is added in the `SOURCES` directory
// Won't add to spec automatically.
// Use the `SpecChange` directive for that
type Add struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required - file to add
	//
	// Types that are assignable to Source:
	//	*Add_File
	//	*Add_Lookaside
	Source isAdd_Source `protobuf_oneof:"source"`
	// Overrides file name if specified
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Add) Reset() {
	*x = Add{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Add) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Add) ProtoMessage() {}

func (x *Add) ProtoReflect() protoreflect.Message {
	mi := &file_cfg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Add.ProtoReflect.Descriptor instead.
func (*Add) Descriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{2}
}

func (m *Add) GetSource() isAdd_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *Add) GetFile() string {
	if x, ok := x.GetSource().(*Add_File); ok {
		return x.File
	}
	return ""
}

func (x *Add) GetLookaside() string {
	if x, ok := x.GetSource().(*Add_Lookaside); ok {
		return x.Lookaside
	}
	return ""
}

func (x *Add) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type isAdd_Source interface {
	isAdd_Source()
}

type Add_File struct {
	File string `protobuf:"bytes,1,opt,name=file,proto3,oneof"`
}

type Add_Lookaside struct {
	Lookaside string `protobuf:"bytes,2,opt,name=lookaside,proto3,oneof"`
}

func (*Add_File) isAdd_Source() {}

func (*Add_Lookaside) isAdd_Source() {}

// Lookaside directive puts patched files in blob storage.
// If tar is true, the files will be put into a tarball and gzipped
type Lookaside struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required - List of files that should be stored in blob storage
	File []string `protobuf:"bytes,1,rep,name=file,proto3" json:"file,omitempty"`
	// Whether files should be put into a tarball and gzipped
	Tar bool `protobuf:"varint,2,opt,name=tar,proto3" json:"tar,omitempty"`
	// Name of tar file, only used and required if tar is true
	ArchiveName string `protobuf:"bytes,3,opt,name=archive_name,json=archiveName,proto3" json:"archive_name,omitempty"`
	// Whether if files should be retrieved from patch tree
	FromPatchTree bool `protobuf:"varint,4,opt,name=from_patch_tree,json=fromPatchTree,proto3" json:"from_patch_tree,omitempty"`
}

func (x *Lookaside) Reset() {
	*x = Lookaside{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lookaside) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lookaside) ProtoMessage() {}

func (x *Lookaside) ProtoReflect() protoreflect.Message {
	mi := &file_cfg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lookaside.ProtoReflect.Descriptor instead.
func (*Lookaside) Descriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{3}
}

func (x *Lookaside) GetFile() []string {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *Lookaside) GetTar() bool {
	if x != nil {
		return x.Tar
	}
	return false
}

func (x *Lookaside) GetArchiveName() string {
	if x != nil {
		return x.ArchiveName
	}
	return ""
}

func (x *Lookaside) GetFromPatchTree() bool {
	if x != nil {
		return x.FromPatchTree
	}
	return false
}

// SpecChange directive makes it possible to execute certain
// plans against the package spec
type SpecChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File             []*SpecChange_FileOperation             `protobuf:"bytes,1,rep,name=file,proto3" json:"file,omitempty"`
	Changelog        []*SpecChange_ChangelogOperation        `protobuf:"bytes,2,rep,name=changelog,proto3" json:"changelog,omitempty"`
	SearchAndReplace []*SpecChange_SearchAndReplaceOperation `protobuf:"bytes,3,rep,name=search_and_replace,json=searchAndReplace,proto3" json:"search_and_replace,omitempty"`
	Append           []*SpecChange_AppendOperation           `protobuf:"bytes,4,rep,name=append,proto3" json:"append,omitempty"`
	NewField         []*SpecChange_NewFieldOperation         `protobuf:"bytes,5,rep,name=new_field,json=newField,proto3" json:"new_field,omitempty"`
	DisableAutoAlign bool                                    `protobuf:"varint,6,opt,name=disable_auto_align,json=disableAutoAlign,proto3" json:"disable_auto_align,omitempty"`
}

func (x *SpecChange) Reset() {
	*x = SpecChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfg_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecChange) ProtoMessage() {}

func (x *SpecChange) ProtoReflect() protoreflect.Message {
	mi := &file_cfg_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecChange.ProtoReflect.Descriptor instead.
func (*SpecChange) Descriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{4}
}

func (x *SpecChange) GetFile() []*SpecChange_FileOperation {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *SpecChange) GetChangelog() []*SpecChange_ChangelogOperation {
	if x != nil {
		return x.Changelog
	}
	return nil
}

func (x *SpecChange) GetSearchAndReplace() []*SpecChange_SearchAndReplaceOperation {
	if x != nil {
		return x.SearchAndReplace
	}
	return nil
}

func (x *SpecChange) GetAppend() []*SpecChange_AppendOperation {
	if x != nil {
		return x.Append
	}
	return nil
}

func (x *SpecChange) GetNewField() []*SpecChange_NewFieldOperation {
	if x != nil {
		return x.NewField
	}
	return nil
}

func (x *SpecChange) GetDisableAutoAlign() bool {
	if x != nil {
		return x.DisableAutoAlign
	}
	return false
}

type Patch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path to patch file from repo root
	File string `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	// Srpmproc adds `SOURCES/` to files in a diff
	// without a prefix if strict is false.
	// If strict is true, then that is disabled.
	Strict bool `protobuf:"varint,2,opt,name=strict,proto3" json:"strict,omitempty"`
}

func (x *Patch) Reset() {
	*x = Patch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfg_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Patch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Patch) ProtoMessage() {}

func (x *Patch) ProtoReflect() protoreflect.Message {
	mi := &file_cfg_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Patch.ProtoReflect.Descriptor instead.
func (*Patch) Descriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{5}
}

func (x *Patch) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *Patch) GetStrict() bool {
	if x != nil {
		return x.Strict
	}
	return false
}

type Cfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replace    []*Replace   `protobuf:"bytes,1,rep,name=replace,proto3" json:"replace,omitempty"`
	Delete     []*Delete    `protobuf:"bytes,2,rep,name=delete,proto3" json:"delete,omitempty"`
	Add        []*Add       `protobuf:"bytes,3,rep,name=add,proto3" json:"add,omitempty"`
	Lookaside  []*Lookaside `protobuf:"bytes,4,rep,name=lookaside,proto3" json:"lookaside,omitempty"`
	SpecChange *SpecChange  `protobuf:"bytes,5,opt,name=spec_change,json=specChange,proto3" json:"spec_change,omitempty"`
	Patch      []*Patch     `protobuf:"bytes,6,rep,name=patch,proto3" json:"patch,omitempty"`
}

func (x *Cfg) Reset() {
	*x = Cfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfg_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cfg) ProtoMessage() {}

func (x *Cfg) ProtoReflect() protoreflect.Message {
	mi := &file_cfg_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cfg.ProtoReflect.Descriptor instead.
func (*Cfg) Descriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{6}
}

func (x *Cfg) GetReplace() []*Replace {
	if x != nil {
		return x.Replace
	}
	return nil
}

func (x *Cfg) GetDelete() []*Delete {
	if x != nil {
		return x.Delete
	}
	return nil
}

func (x *Cfg) GetAdd() []*Add {
	if x != nil {
		return x.Add
	}
	return nil
}

func (x *Cfg) GetLookaside() []*Lookaside {
	if x != nil {
		return x.Lookaside
	}
	return nil
}

func (x *Cfg) GetSpecChange() *SpecChange {
	if x != nil {
		return x.SpecChange
	}
	return nil
}

func (x *Cfg) GetPatch() []*Patch {
	if x != nil {
		return x.Patch
	}
	return nil
}

// The FileOperation plan allows patchers to add or delete
// a file from the spec.
type SpecChange_FileOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// File name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// File type
	Type SpecChange_FileOperation_Type `protobuf:"varint,2,opt,name=type,proto3,enum=srpmproc.SpecChange_FileOperation_Type" json:"type,omitempty"`
	// Types that are assignable to Mode:
	//	*SpecChange_FileOperation_Add
	//	*SpecChange_FileOperation_Delete
	Mode isSpecChange_FileOperation_Mode `protobuf_oneof:"mode"`
	// Only works for patch type
	AddToPrep bool  `protobuf:"varint,5,opt,name=add_to_prep,json=addToPrep,proto3" json:"add_to_prep,omitempty"`
	NPath     int32 `protobuf:"varint,6,opt,name=n_path,json=nPath,proto3" json:"n_path,omitempty"`
}

func (x *SpecChange_FileOperation) Reset() {
	*x = SpecChange_FileOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfg_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecChange_FileOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecChange_FileOperation) ProtoMessage() {}

func (x *SpecChange_FileOperation) ProtoReflect() protoreflect.Message {
	mi := &file_cfg_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecChange_FileOperation.ProtoReflect.Descriptor instead.
func (*SpecChange_FileOperation) Descriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{4, 0}
}

func (x *SpecChange_FileOperation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SpecChange_FileOperation) GetType() SpecChange_FileOperation_Type {
	if x != nil {
		return x.Type
	}
	return SpecChange_FileOperation_Unknown
}

func (m *SpecChange_FileOperation) GetMode() isSpecChange_FileOperation_Mode {
	if m != nil {
		return m.Mode
	}
	return nil
}

func (x *SpecChange_FileOperation) GetAdd() bool {
	if x, ok := x.GetMode().(*SpecChange_FileOperation_Add); ok {
		return x.Add
	}
	return false
}

func (x *SpecChange_FileOperation) GetDelete() bool {
	if x, ok := x.GetMode().(*SpecChange_FileOperation_Delete); ok {
		return x.Delete
	}
	return false
}

func (x *SpecChange_FileOperation) GetAddToPrep() bool {
	if x != nil {
		return x.AddToPrep
	}
	return false
}

func (x *SpecChange_FileOperation) GetNPath() int32 {
	if x != nil {
		return x.NPath
	}
	return 0
}

type isSpecChange_FileOperation_Mode interface {
	isSpecChange_FileOperation_Mode()
}

type SpecChange_FileOperation_Add struct {
	// Add won't add the file to the tree.
	// Use the `Add` directive for that
	Add bool `protobuf:"varint,3,opt,name=add,proto3,oneof"`
}

type SpecChange_FileOperation_Delete struct {
	// Delete won't delete the file from the tree.
	// Use the `Delete` directive for that
	Delete bool `protobuf:"varint,4,opt,name=delete,proto3,oneof"`
}

func (*SpecChange_FileOperation_Add) isSpecChange_FileOperation_Mode() {}

func (*SpecChange_FileOperation_Delete) isSpecChange_FileOperation_Mode() {}

// ChangelogOperation adds a new changelog entry
type SpecChange_ChangelogOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorName  string   `protobuf:"bytes,1,opt,name=author_name,json=authorName,proto3" json:"author_name,omitempty"`
	AuthorEmail string   `protobuf:"bytes,2,opt,name=author_email,json=authorEmail,proto3" json:"author_email,omitempty"`
	Message     []string `protobuf:"bytes,3,rep,name=message,proto3" json:"message,omitempty"`
}

func (x *SpecChange_ChangelogOperation) Reset() {
	*x = SpecChange_ChangelogOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfg_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecChange_ChangelogOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecChange_ChangelogOperation) ProtoMessage() {}

func (x *SpecChange_ChangelogOperation) ProtoReflect() protoreflect.Message {
	mi := &file_cfg_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecChange_ChangelogOperation.ProtoReflect.Descriptor instead.
func (*SpecChange_ChangelogOperation) Descriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{4, 1}
}

func (x *SpecChange_ChangelogOperation) GetAuthorName() string {
	if x != nil {
		return x.AuthorName
	}
	return ""
}

func (x *SpecChange_ChangelogOperation) GetAuthorEmail() string {
	if x != nil {
		return x.AuthorEmail
	}
	return ""
}

func (x *SpecChange_ChangelogOperation) GetMessage() []string {
	if x != nil {
		return x.Message
	}
	return nil
}

// SearchAndReplaceOperation replaces substring with value
// in a specified field
type SpecChange_SearchAndReplaceOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identifier:
	//	*SpecChange_SearchAndReplaceOperation_Field
	//	*SpecChange_SearchAndReplaceOperation_Any
	//	*SpecChange_SearchAndReplaceOperation_StartsWith
	//	*SpecChange_SearchAndReplaceOperation_EndsWith
	Identifier isSpecChange_SearchAndReplaceOperation_Identifier `protobuf_oneof:"identifier"`
	Find       string                                            `protobuf:"bytes,5,opt,name=find,proto3" json:"find,omitempty"`
	Replace    string                                            `protobuf:"bytes,6,opt,name=replace,proto3" json:"replace,omitempty"`
	// How many occurences to replace.
	// Set to -1 for all
	N int32 `protobuf:"zigzag32,7,opt,name=n,proto3" json:"n,omitempty"`
}

func (x *SpecChange_SearchAndReplaceOperation) Reset() {
	*x = SpecChange_SearchAndReplaceOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfg_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecChange_SearchAndReplaceOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecChange_SearchAndReplaceOperation) ProtoMessage() {}

func (x *SpecChange_SearchAndReplaceOperation) ProtoReflect() protoreflect.Message {
	mi := &file_cfg_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecChange_SearchAndReplaceOperation.ProtoReflect.Descriptor instead.
func (*SpecChange_SearchAndReplaceOperation) Descriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{4, 2}
}

func (m *SpecChange_SearchAndReplaceOperation) GetIdentifier() isSpecChange_SearchAndReplaceOperation_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *SpecChange_SearchAndReplaceOperation) GetField() string {
	if x, ok := x.GetIdentifier().(*SpecChange_SearchAndReplaceOperation_Field); ok {
		return x.Field
	}
	return ""
}

func (x *SpecChange_SearchAndReplaceOperation) GetAny() bool {
	if x, ok := x.GetIdentifier().(*SpecChange_SearchAndReplaceOperation_Any); ok {
		return x.Any
	}
	return false
}

func (x *SpecChange_SearchAndReplaceOperation) GetStartsWith() bool {
	if x, ok := x.GetIdentifier().(*SpecChange_SearchAndReplaceOperation_StartsWith); ok {
		return x.StartsWith
	}
	return false
}

func (x *SpecChange_SearchAndReplaceOperation) GetEndsWith() bool {
	if x, ok := x.GetIdentifier().(*SpecChange_SearchAndReplaceOperation_EndsWith); ok {
		return x.EndsWith
	}
	return false
}

func (x *SpecChange_SearchAndReplaceOperation) GetFind() string {
	if x != nil {
		return x.Find
	}
	return ""
}

func (x *SpecChange_SearchAndReplaceOperation) GetReplace() string {
	if x != nil {
		return x.Replace
	}
	return ""
}

func (x *SpecChange_SearchAndReplaceOperation) GetN() int32 {
	if x != nil {
		return x.N
	}
	return 0
}

type isSpecChange_SearchAndReplaceOperation_Identifier interface {
	isSpecChange_SearchAndReplaceOperation_Identifier()
}

type SpecChange_SearchAndReplaceOperation_Field struct {
	// replace occurrences in field value
	Field string `protobuf:"bytes,1,opt,name=field,proto3,oneof"`
}

type SpecChange_SearchAndReplaceOperation_Any struct {
	// replace occurrences in any line
	Any bool `protobuf:"varint,2,opt,name=any,proto3,oneof"`
}

type SpecChange_SearchAndReplaceOperation_StartsWith struct {
	// replace occurrences that starts with find
	StartsWith bool `protobuf:"varint,3,opt,name=starts_with,json=startsWith,proto3,oneof"`
}

type SpecChange_SearchAndReplaceOperation_EndsWith struct {
	// replace occurrences that ends with find
	EndsWith bool `protobuf:"varint,4,opt,name=ends_with,json=endsWith,proto3,oneof"`
}

func (*SpecChange_SearchAndReplaceOperation_Field) isSpecChange_SearchAndReplaceOperation_Identifier() {
}

func (*SpecChange_SearchAndReplaceOperation_Any) isSpecChange_SearchAndReplaceOperation_Identifier() {
}

func (*SpecChange_SearchAndReplaceOperation_StartsWith) isSpecChange_SearchAndReplaceOperation_Identifier() {
}

func (*SpecChange_SearchAndReplaceOperation_EndsWith) isSpecChange_SearchAndReplaceOperation_Identifier() {
}

// AppendOperation appends a value to specified field or section
type SpecChange_AppendOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SpecChange_AppendOperation) Reset() {
	*x = SpecChange_AppendOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfg_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecChange_AppendOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecChange_AppendOperation) ProtoMessage() {}

func (x *SpecChange_AppendOperation) ProtoReflect() protoreflect.Message {
	mi := &file_cfg_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecChange_AppendOperation.ProtoReflect.Descriptor instead.
func (*SpecChange_AppendOperation) Descriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{4, 3}
}

func (x *SpecChange_AppendOperation) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *SpecChange_AppendOperation) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// NewFieldOperation adds a new kv to the spec
// The field will be grouped if other fields of same name exists
type SpecChange_NewFieldOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key cannot be Source or Patch
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SpecChange_NewFieldOperation) Reset() {
	*x = SpecChange_NewFieldOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfg_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecChange_NewFieldOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecChange_NewFieldOperation) ProtoMessage() {}

func (x *SpecChange_NewFieldOperation) ProtoReflect() protoreflect.Message {
	mi := &file_cfg_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecChange_NewFieldOperation.ProtoReflect.Descriptor instead.
func (*SpecChange_NewFieldOperation) Descriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{4, 4}
}

func (x *SpecChange_NewFieldOperation) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SpecChange_NewFieldOperation) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_cfg_proto protoreflect.FileDescriptor

var file_cfg_proto_rawDesc = []byte{
	0x0a, 0x09, 0x63, 0x66, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x72, 0x70,
	0x6d, 0x70, 0x72, 0x6f, 0x63, 0x22, 0x95, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x77, 0x69, 0x74, 0x68,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x77, 0x69, 0x74,
	0x68, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x6c, 0x6f, 0x6f, 0x6b, 0x61, 0x73, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x6f, 0x6b, 0x61, 0x73, 0x69, 0x64, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x22, 0x1c, 0x0a,
	0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x59, 0x0a, 0x03, 0x41,
	0x64, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x6c, 0x6f, 0x6f, 0x6b,
	0x61, 0x73, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6c,
	0x6f, 0x6f, 0x6b, 0x61, 0x73, 0x69, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x7c, 0x0a, 0x09, 0x4c, 0x6f, 0x6f, 0x6b, 0x61, 0x73,
	0x69, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x74, 0x61, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x72, 0x65, 0x65, 0x22, 0xdc, 0x08, 0x0a, 0x0a, 0x53, 0x70, 0x65, 0x63, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x72, 0x70, 0x6d, 0x70, 0x72, 0x6f, 0x63, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x72, 0x70, 0x6d, 0x70, 0x72, 0x6f, 0x63, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c,
	0x6f, 0x67, 0x12, 0x5c, 0x0a, 0x12, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x73, 0x72, 0x70, 0x6d, 0x70, 0x72, 0x6f, 0x63, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6e, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x12, 0x3c, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x73, 0x72, 0x70, 0x6d, 0x70, 0x72, 0x6f, 0x63, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x43,
	0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x73, 0x72, 0x70, 0x6d, 0x70, 0x72, 0x6f, 0x63, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x6c, 0x69, 0x67,
	0x6e, 0x1a, 0xf9, 0x01, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x72, 0x70, 0x6d, 0x70, 0x72, 0x6f, 0x63,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x03, 0x61, 0x64, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x65,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x64, 0x64, 0x54, 0x6f, 0x50, 0x72,
	0x65, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x22, 0x2a, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x10, 0x02, 0x42, 0x06, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x1a, 0x72, 0x0a,
	0x12, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0xd3, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6e, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x12, 0x21, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x12, 0x1d,
	0x0a, 0x09, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6e,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x01, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x3b, 0x0a, 0x11, 0x4e, 0x65, 0x77, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x33, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x22, 0x8e, 0x02, 0x0a, 0x03, 0x43, 0x66, 0x67,
	0x12, 0x2b, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x73, 0x72, 0x70, 0x6d, 0x70, 0x72, 0x6f, 0x63, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x28, 0x0a,
	0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x73, 0x72, 0x70, 0x6d, 0x70, 0x72, 0x6f, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x72, 0x70, 0x6d, 0x70, 0x72, 0x6f, 0x63, 0x2e,
	0x41, 0x64, 0x64, 0x52, 0x03, 0x61, 0x64, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x6c, 0x6f, 0x6f, 0x6b,
	0x61, 0x73, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x72,
	0x70, 0x6d, 0x70, 0x72, 0x6f, 0x63, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x61, 0x73, 0x69, 0x64, 0x65,
	0x52, 0x09, 0x6c, 0x6f, 0x6f, 0x6b, 0x61, 0x73, 0x69, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x72, 0x70, 0x6d, 0x70, 0x72, 0x6f, 0x63, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x72, 0x70, 0x6d, 0x70, 0x72, 0x6f, 0x63, 0x2e, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x6f, 0x63, 0x6b, 0x79, 0x2d, 0x6c, 0x69,
	0x6e, 0x75, 0x78, 0x2f, 0x73, 0x72, 0x70, 0x6d, 0x70, 0x72, 0x6f, 0x63, 0x2f, 0x70, 0x62, 0x3b,
	0x73, 0x72, 0x70, 0x6d, 0x70, 0x72, 0x6f, 0x63, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_cfg_proto_rawDescOnce sync.Once
	file_cfg_proto_rawDescData = file_cfg_proto_rawDesc
)

func file_cfg_proto_rawDescGZIP() []byte {
	file_cfg_proto_rawDescOnce.Do(func() {
		file_cfg_proto_rawDescData = protoimpl.X.CompressGZIP(file_cfg_proto_rawDescData)
	})
	return file_cfg_proto_rawDescData
}

var file_cfg_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cfg_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_cfg_proto_goTypes = []interface{}{
	(SpecChange_FileOperation_Type)(0),           // 0: srpmproc.SpecChange.FileOperation.Type
	(*Replace)(nil),                              // 1: srpmproc.Replace
	(*Delete)(nil),                               // 2: srpmproc.Delete
	(*Add)(nil),                                  // 3: srpmproc.Add
	(*Lookaside)(nil),                            // 4: srpmproc.Lookaside
	(*SpecChange)(nil),                           // 5: srpmproc.SpecChange
	(*Patch)(nil),                                // 6: srpmproc.Patch
	(*Cfg)(nil),                                  // 7: srpmproc.Cfg
	(*SpecChange_FileOperation)(nil),             // 8: srpmproc.SpecChange.FileOperation
	(*SpecChange_ChangelogOperation)(nil),        // 9: srpmproc.SpecChange.ChangelogOperation
	(*SpecChange_SearchAndReplaceOperation)(nil), // 10: srpmproc.SpecChange.SearchAndReplaceOperation
	(*SpecChange_AppendOperation)(nil),           // 11: srpmproc.SpecChange.AppendOperation
	(*SpecChange_NewFieldOperation)(nil),         // 12: srpmproc.SpecChange.NewFieldOperation
}
var file_cfg_proto_depIdxs = []int32{
	8,  // 0: srpmproc.SpecChange.file:type_name -> srpmproc.SpecChange.FileOperation
	9,  // 1: srpmproc.SpecChange.changelog:type_name -> srpmproc.SpecChange.ChangelogOperation
	10, // 2: srpmproc.SpecChange.search_and_replace:type_name -> srpmproc.SpecChange.SearchAndReplaceOperation
	11, // 3: srpmproc.SpecChange.append:type_name -> srpmproc.SpecChange.AppendOperation
	12, // 4: srpmproc.SpecChange.new_field:type_name -> srpmproc.SpecChange.NewFieldOperation
	1,  // 5: srpmproc.Cfg.replace:type_name -> srpmproc.Replace
	2,  // 6: srpmproc.Cfg.delete:type_name -> srpmproc.Delete
	3,  // 7: srpmproc.Cfg.add:type_name -> srpmproc.Add
	4,  // 8: srpmproc.Cfg.lookaside:type_name -> srpmproc.Lookaside
	5,  // 9: srpmproc.Cfg.spec_change:type_name -> srpmproc.SpecChange
	6,  // 10: srpmproc.Cfg.patch:type_name -> srpmproc.Patch
	0,  // 11: srpmproc.SpecChange.FileOperation.type:type_name -> srpmproc.SpecChange.FileOperation.Type
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_cfg_proto_init() }
func file_cfg_proto_init() {
	if File_cfg_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cfg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Replace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Delete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Add); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfg_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lookaside); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfg_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfg_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Patch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfg_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfg_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecChange_FileOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfg_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecChange_ChangelogOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfg_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecChange_SearchAndReplaceOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfg_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecChange_AppendOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfg_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecChange_NewFieldOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cfg_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Replace_WithFile)(nil),
		(*Replace_WithInline)(nil),
		(*Replace_WithLookaside)(nil),
	}
	file_cfg_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Add_File)(nil),
		(*Add_Lookaside)(nil),
	}
	file_cfg_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*SpecChange_FileOperation_Add)(nil),
		(*SpecChange_FileOperation_Delete)(nil),
	}
	file_cfg_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*SpecChange_SearchAndReplaceOperation_Field)(nil),
		(*SpecChange_SearchAndReplaceOperation_Any)(nil),
		(*SpecChange_SearchAndReplaceOperation_StartsWith)(nil),
		(*SpecChange_SearchAndReplaceOperation_EndsWith)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cfg_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cfg_proto_goTypes,
		DependencyIndexes: file_cfg_proto_depIdxs,
		EnumInfos:         file_cfg_proto_enumTypes,
		MessageInfos:      file_cfg_proto_msgTypes,
	}.Build()
	File_cfg_proto = out.File
	file_cfg_proto_rawDesc = nil
	file_cfg_proto_goTypes = nil
	file_cfg_proto_depIdxs = nil
}
