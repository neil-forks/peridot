import{r as f,a as l,d as m}from"./route-for-api-3af3eac8.js";import{g as h,a as T,c as _,b as g}from"./get-codec-353a50e1.js";import{s as u,p as I}from"./parse-with-big-int-0036a80a.js";import{p as P}from"./is-http-3399f1c9.js";const b=t=>{const e=t.indexOf("["),r=t.indexOf("]");return t.slice(e+1,r).split(" ").filter(a=>a!=="__stack_trace").map(a=>a.endsWith(",")?a.slice(0,a.length-1):a)},O=async(t,e)=>(e=await e,{namespace:t,workflowId:e.id,runId:e.runId});async function d({workflow:t,namespace:e,queryType:r},a=fetch,n){t=await t;const c=await O(e,t),s=f("query",c);return await l(s,{options:{method:"POST",body:u({execution:{workflowId:t.id,runId:t.runId},query:{queryType:r}})},request:a,onError:n,notifyOnError:!1})}async function B(t,e=fetch){return new Promise((r,a)=>{d({...t,queryType:"@@temporal-internal__list"},e,n=>{m(n.body)&&n.body.message.includes("@@temporal-internal__list")?r(b(n.body.message)):a(n)})})}async function W(t,e,r,a=fetch){return d(t,a).then(async n=>{const{queryResult:c}=n??{queryResult:{payloads:[]}};let s=c.payloads;try{if(s[0]){const o=h(e),y=T(e,P),p={...e,codec:{...e==null?void 0:e.codec,endpoint:o,passAccessToken:y}},i=o?await _({attributes:c,namespace:t.namespace,settings:p,accessToken:r}):await g(c);s=i==null?void 0:i.payloads[0]}return I(s)}catch{return typeof s!="string"?u(s):s}})}async function C(t,e,r){return W({...t,queryType:"__stack_trace"},e,r)}export{W as a,C as b,B as g};
