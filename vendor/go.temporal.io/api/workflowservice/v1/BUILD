load("@io_bazel_rules_go//go:def.bzl", "go_library")

go_library(
    name = "workflowservice",
    srcs = [
        "request_response.pb.go",
        "service.pb.go",
    ],
    importmap = "go.resf.org/peridot/vendor/go.temporal.io/api/workflowservice/v1",
    importpath = "go.temporal.io/api/workflowservice/v1",
    visibility = ["//visibility:public"],
    deps = [
        "//vendor/github.com/gogo/protobuf/gogoproto",
        "//vendor/github.com/gogo/protobuf/proto",
        "//vendor/github.com/gogo/protobuf/sortkeys",
        "//vendor/github.com/gogo/protobuf/types",
        "//vendor/go.temporal.io/api/batch/v1:batch",
        "//vendor/go.temporal.io/api/command/v1:command",
        "//vendor/go.temporal.io/api/common/v1:common",
        "//vendor/go.temporal.io/api/enums/v1:enums",
        "//vendor/go.temporal.io/api/failure/v1:failure",
        "//vendor/go.temporal.io/api/filter/v1:filter",
        "//vendor/go.temporal.io/api/history/v1:history",
        "//vendor/go.temporal.io/api/namespace/v1:namespace",
        "//vendor/go.temporal.io/api/query/v1:query",
        "//vendor/go.temporal.io/api/replication/v1:replication",
        "//vendor/go.temporal.io/api/schedule/v1:schedule",
        "//vendor/go.temporal.io/api/taskqueue/v1:taskqueue",
        "//vendor/go.temporal.io/api/update/v1:update",
        "//vendor/go.temporal.io/api/version/v1:version",
        "//vendor/go.temporal.io/api/workflow/v1:workflow",
        "@org_golang_google_grpc//:go_default_library",
        "@org_golang_google_grpc//codes",
        "@org_golang_google_grpc//status",
    ],
)
