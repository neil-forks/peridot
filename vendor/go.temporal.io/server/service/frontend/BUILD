load("@io_bazel_rules_go//go:def.bzl", "go_library")

go_library(
    name = "frontend",
    srcs = [
        "adminHandler.go",
        "dcRedirectionHandler.go",
        "dcRedirectionPolicy.go",
        "dcRedirectionPolicy_mock.go",
        "errors.go",
        "fx.go",
        "interface.go",
        "interface_mock.go",
        "operator_handler.go",
        "service.go",
        "token.go",
        "validators.go",
        "versionChecker.go",
        "workflow_handler.go",
    ],
    importmap = "go.resf.org/peridot/vendor/go.temporal.io/server/service/frontend",
    importpath = "go.temporal.io/server/service/frontend",
    visibility = ["//visibility:public"],
    deps = [
        "//vendor/github.com/golang/mock/gomock",
        "//vendor/github.com/pborman/uuid",
        "//vendor/go.temporal.io/api/batch/v1:batch",
        "//vendor/go.temporal.io/api/common/v1:common",
        "//vendor/go.temporal.io/api/enums/v1:enums",
        "//vendor/go.temporal.io/api/filter/v1:filter",
        "//vendor/go.temporal.io/api/history/v1:history",
        "//vendor/go.temporal.io/api/operatorservice/v1:operatorservice",
        "//vendor/go.temporal.io/api/query/v1:query",
        "//vendor/go.temporal.io/api/schedule/v1:schedule",
        "//vendor/go.temporal.io/api/serviceerror",
        "//vendor/go.temporal.io/api/taskqueue/v1:taskqueue",
        "//vendor/go.temporal.io/api/version/v1:version",
        "//vendor/go.temporal.io/api/workflow/v1:workflow",
        "//vendor/go.temporal.io/api/workflowservice/v1:workflowservice",
        "//vendor/go.temporal.io/sdk/client",
        "//vendor/go.temporal.io/server/api/adminservice/v1:adminservice",
        "//vendor/go.temporal.io/server/api/cluster/v1:cluster",
        "//vendor/go.temporal.io/server/api/enums/v1:enums",
        "//vendor/go.temporal.io/server/api/history/v1:history",
        "//vendor/go.temporal.io/server/api/historyservice/v1:historyservice",
        "//vendor/go.temporal.io/server/api/matchingservice/v1:matchingservice",
        "//vendor/go.temporal.io/server/api/persistence/v1:persistence",
        "//vendor/go.temporal.io/server/api/replication/v1:replication",
        "//vendor/go.temporal.io/server/api/schedule/v1:schedule",
        "//vendor/go.temporal.io/server/api/token/v1:token",
        "//vendor/go.temporal.io/server/client",
        "//vendor/go.temporal.io/server/client/admin",
        "//vendor/go.temporal.io/server/common",
        "//vendor/go.temporal.io/server/common/archiver",
        "//vendor/go.temporal.io/server/common/archiver/provider",
        "//vendor/go.temporal.io/server/common/authorization",
        "//vendor/go.temporal.io/server/common/backoff",
        "//vendor/go.temporal.io/server/common/clock",
        "//vendor/go.temporal.io/server/common/cluster",
        "//vendor/go.temporal.io/server/common/config",
        "//vendor/go.temporal.io/server/common/convert",
        "//vendor/go.temporal.io/server/common/dynamicconfig",
        "//vendor/go.temporal.io/server/common/enums",
        "//vendor/go.temporal.io/server/common/failure",
        "//vendor/go.temporal.io/server/common/headers",
        "//vendor/go.temporal.io/server/common/log",
        "//vendor/go.temporal.io/server/common/log/tag",
        "//vendor/go.temporal.io/server/common/membership",
        "//vendor/go.temporal.io/server/common/metrics",
        "//vendor/go.temporal.io/server/common/namespace",
        "//vendor/go.temporal.io/server/common/payload",
        "//vendor/go.temporal.io/server/common/payloads",
        "//vendor/go.temporal.io/server/common/persistence",
        "//vendor/go.temporal.io/server/common/persistence/client",
        "//vendor/go.temporal.io/server/common/persistence/serialization",
        "//vendor/go.temporal.io/server/common/persistence/versionhistory",
        "//vendor/go.temporal.io/server/common/persistence/visibility",
        "//vendor/go.temporal.io/server/common/persistence/visibility/manager",
        "//vendor/go.temporal.io/server/common/persistence/visibility/store/elasticsearch/client",
        "//vendor/go.temporal.io/server/common/persistence/visibility/store/standard/cassandra",
        "//vendor/go.temporal.io/server/common/primitives",
        "//vendor/go.temporal.io/server/common/primitives/timestamp",
        "//vendor/go.temporal.io/server/common/quotas",
        "//vendor/go.temporal.io/server/common/resolver",
        "//vendor/go.temporal.io/server/common/resource",
        "//vendor/go.temporal.io/server/common/rpc",
        "//vendor/go.temporal.io/server/common/rpc/interceptor",
        "//vendor/go.temporal.io/server/common/sdk",
        "//vendor/go.temporal.io/server/common/searchattribute",
        "//vendor/go.temporal.io/server/common/telemetry",
        "//vendor/go.temporal.io/server/common/util",
        "//vendor/go.temporal.io/server/common/xdc",
        "//vendor/go.temporal.io/server/service",
        "//vendor/go.temporal.io/server/service/frontend/configs",
        "//vendor/go.temporal.io/server/service/history/tasks",
        "//vendor/go.temporal.io/server/service/worker",
        "//vendor/go.temporal.io/server/service/worker/addsearchattributes",
        "//vendor/go.temporal.io/server/service/worker/batcher",
        "//vendor/go.temporal.io/server/service/worker/deletenamespace",
        "//vendor/go.temporal.io/server/service/worker/deletenamespace/deleteexecutions",
        "//vendor/go.temporal.io/server/service/worker/scheduler",
        "//vendor/go.temporal.io/version/check",
        "//vendor/go.uber.org/fx",
        "//vendor/golang.org/x/exp/maps",
        "@org_golang_google_grpc//:go_default_library",
        "@org_golang_google_grpc//health",
        "@org_golang_google_grpc//health/grpc_health_v1",
        "@org_golang_google_grpc//keepalive",
        "@org_golang_google_grpc//reflection",
    ],
)
