load("@io_bazel_rules_go//go:def.bzl", "go_library")

go_library(
    name = "matching",
    srcs = [
        "ackManager.go",
        "config.go",
        "context.go",
        "db.go",
        "db_task_manager.go",
        "db_task_queue_ownership.go",
        "db_task_queue_ownership_mock.go",
        "db_task_reader.go",
        "db_task_reader_mock.go",
        "db_task_writer.go",
        "db_task_writer_mock.go",
        "forwarder.go",
        "fx.go",
        "handler.go",
        "liveness.go",
        "matcher.go",
        "matchingEngine.go",
        "matchingEngineInterfaces.go",
        "pollerHistory.go",
        "service.go",
        "task.go",
        "taskGC.go",
        "taskQueueManager.go",
        "taskReader.go",
        "taskWriter.go",
        "taskqueue.go",
        "version_graph.go",
    ],
    importmap = "go.resf.org/peridot/vendor/go.temporal.io/server/service/matching",
    importpath = "go.temporal.io/server/service/matching",
    visibility = ["//visibility:public"],
    deps = [
        "//vendor/github.com/dgryski/go-farm",
        "//vendor/github.com/gogo/protobuf/proto",
        "//vendor/github.com/golang/mock/gomock",
        "//vendor/github.com/pborman/uuid",
        "//vendor/go.temporal.io/api/common/v1:common",
        "//vendor/go.temporal.io/api/enums/v1:enums",
        "//vendor/go.temporal.io/api/serviceerror",
        "//vendor/go.temporal.io/api/taskqueue/v1:taskqueue",
        "//vendor/go.temporal.io/api/workflowservice/v1:workflowservice",
        "//vendor/go.temporal.io/server/api/enums/v1:enums",
        "//vendor/go.temporal.io/server/api/historyservice/v1:historyservice",
        "//vendor/go.temporal.io/server/api/matchingservice/v1:matchingservice",
        "//vendor/go.temporal.io/server/api/persistence/v1:persistence",
        "//vendor/go.temporal.io/server/api/token/v1:token",
        "//vendor/go.temporal.io/server/common",
        "//vendor/go.temporal.io/server/common/backoff",
        "//vendor/go.temporal.io/server/common/cache",
        "//vendor/go.temporal.io/server/common/clock",
        "//vendor/go.temporal.io/server/common/cluster",
        "//vendor/go.temporal.io/server/common/collection",
        "//vendor/go.temporal.io/server/common/dynamicconfig",
        "//vendor/go.temporal.io/server/common/future",
        "//vendor/go.temporal.io/server/common/headers",
        "//vendor/go.temporal.io/server/common/log",
        "//vendor/go.temporal.io/server/common/log/tag",
        "//vendor/go.temporal.io/server/common/membership",
        "//vendor/go.temporal.io/server/common/metrics",
        "//vendor/go.temporal.io/server/common/namespace",
        "//vendor/go.temporal.io/server/common/persistence",
        "//vendor/go.temporal.io/server/common/persistence/client",
        "//vendor/go.temporal.io/server/common/primitives",
        "//vendor/go.temporal.io/server/common/primitives/timestamp",
        "//vendor/go.temporal.io/server/common/quotas",
        "//vendor/go.temporal.io/server/common/resource",
        "//vendor/go.temporal.io/server/common/rpc/interceptor",
        "//vendor/go.temporal.io/server/common/serviceerror",
        "//vendor/go.temporal.io/server/common/util",
        "//vendor/go.temporal.io/server/internal/goro",
        "//vendor/go.temporal.io/server/service",
        "//vendor/go.temporal.io/server/service/matching/configs",
        "//vendor/go.temporal.io/server/service/worker/scanner/taskqueue",
        "//vendor/go.uber.org/atomic",
        "//vendor/go.uber.org/fx",
        "//vendor/golang.org/x/exp/maps",
        "@org_golang_google_grpc//:go_default_library",
        "@org_golang_google_grpc//health",
        "@org_golang_google_grpc//health/grpc_health_v1",
    ],
)
